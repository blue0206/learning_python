STRINGS
.title() - capitalize first letter of word
.upper() - all letters in upper case
.lower() - all letters in lower case
fstring - f"{variable_1} {variable_2}"
.rstrip() - remove whitespace from the right of target
.lstrip() - remove whitespace from the left of target
.strip() - remove whitespace
.removeprefix() - remove a part of string FROM THE BEGINNING
                 for example, removeprefix('https://')
                 to remove unwanted part of web address
.removesuffix() - remove a part of string FROM THE END
                 for example, removeprefix(".txt")
                 to remove file extension from file name display
.replace(replacee, replacer) - replaces all the occurrences of a word with 
                               another word of your choice (case-sensitive.)
str() - converts variable into string.
.split() - creates a list of all the words in a string.
.count() - tells how many times a word or phrase appears in a string.

NUMBERS
** - exponents
Modulo Operator(%) - Divides one number by another number and returns remainder
min() - finds the smallest number in a list
max() - finds the highest number in a list
sum() - finds the sum of numbers in a list
range(x,y,z) - generates a series of numbers
               x: initial value of range (0 if not set; is printed)
               y: final value of range (not printed)
               z: step size (this value is added to initial value till it
                             reaches final value)
               for example, the following code print numbers 1 through 5:
                   for value in range(2, 11, 2):
                       print(value)
                   THE ABOVE CODE PRINTS EVEN NUMBERS; 2 4 6 8 10
int() - converts variable into integer.
float() - converts variable into float.

FLAG
When a variable holds a boolean value, it's called a flag

LISTS
list[-1] - Returns the LAST ITEM in the list.
           Similarly, [-2] (second last), [-3] (third last), etc.
list = [] - Creates an empty list.
.append() - Adds item to the end of the list.
.insert(<position>, <name>) - Inserts item at a specified position in list.
del list[] - Removes an item from the list.
.pop() - Removes the last item in list when no argument is given.
         Removes an item from the list based on argument given.
.remove() - Removes a specific item from the list based on the name given as 
            the argument.
            to remove all instances of a specific item from list, use while loop
.sort() - Permanently sorts the list in Alphabetical order.
.sort(reverse=True) - Permanently sorts the list in reverse Alphabetical order.
sorted() - Temporarily sorts the list in Alphabetical order.
sorted(list, reverse=True) - Temporarily sorts the list in reverse Alphabetical
                             order.
.reverse() - Sorts the list in reverse order. Use again to revert back.
len() - Finds length of list.
list() - takes a single argument (for example, range()) and creates a list.
list[x:y:z] - slices a list
              x: initial array number (0 if not mentioned; is printed)
              y: final array number (Prints last item of list if not mentioned; 
                                   not printed, like with range)
              z: step size (this value is added to initial value till it reaches
                            final value)
              for example:
                list = ['a', 'b', 'c', 'd']
                print(list[0:2]) / print(list[:2])
              THE OUTPUT OF ABOVEMENTIONED CODE IS ['a', 'b']
                print(list[:])
              THE OUTPUT OF ABOVEMENTIONED CODE IS ['a', 'b', 'c', 'd']
                print(list[2:])
              THE OUTPUT OF ABOVEMENTIONED CODE IS ['c', 'd']
Copying List - list_1 = ['x', 'y']
               list_2 = list_1[:]
               In the abovementioned code, list_1 is sliced and copied into
               list_2
Comprehensive List (for loop) - list = [value for value in range()]
                                is the same as the following lines of code:
                                list = []
                                for value in range():
                                  list.append(value)
if list: - if passing list through if statement returns 'False', it means the
           list is empty and vice-versa  

TUPLES (a.k.a Immutable List)
To define a tuple with single element, add a trailing comma (tuple = (5,))

DICTIONARY
dictionary = {<'key'>: <value>} - creates a dictionary, which is a collection
                                  'key-value' pairs. 
                                  key is used to access value
                                  value can be number, string, list, another 
                                  dictionary, or any object you may creates
dictionary['key'] = <value> - adds a 'key-value' pair to an existing dictionary
del dictionary['key'] - deletes a 'key-value' pair from dictionary
.get() - used in case the key does not exist.
        dictionary = {}
        item = dictionary.get('key', 'value')
        print(item)
.items() - returns a sequence of key-value pairs
          for key, value in dictionary.items():
              print(key)
              print(value)
.keys() - returns the keys of dictionary
          for value in dictionary.keys():
              print(value)
          THE OUTPUT WILL BE ALL THE keys
.values() - returns the values of dictionary, same as .keys()
set() - a collection in which each item is unique
        suppose a dictionary has repetitive values for every key, in that case,
        for value in set(dictionary.values()):
            print(value)

NESTING
A List of Dictionaries - list = [dictionary1, dictionary2]
A List in Dictionary - dictionary = {key: list, key: list}
A Dictionary in Dictionary- dictionary = {key: dictionary, key: dictionary}

SET
set = {x, y, z}
A set is wrapped in braces like a dictionary but does not have key-value pairs.
The order is not retained in a set, i.e., when printed, x, y, and z can be in 
any random order.

LOOPS
for - for item in list_of_items:
        code <everything indented is in the loop>
while - while condition:
          code
break - ends the loop.
continue - goes back to the start of loop.
pass - tells Python to do nothing in a block.

CONDITIONALS
if and else - if <condition>:
                  <task>
              else:
                  <task>
if-elif-else - if <condition>:
                  <task>
               elif <condition>:(elif works like else if in python)
                  <task>
               else:
                  <task>
empty string/list/dictionary always return false value and hence, won't execute.

LOGIC
and - TRUE if both conditions satisfy
or - TRUE if either of the conditions satisfy
not - reverses TRUE to FALSE and vice-versa
in - for example,
         num = [0,1,2,3,4]
         if 2 in num:
            print('True')
         else:
            print('False')
      THE OUTPUT is TRUE.
      'in' searches for input in the target.

USER INPUT
input() - takes user input in string form

FUNCTIONS
def - defines a function
      def function():
        <code>
"""docstring""" - describes what a function does
parameter - a piece of info a function needs to work
In case of default value of parameter, there should be no spaces on either side
of '=', the same goes for keyword arguments in function calls.
argument - a piece of info passed from function call to a function
Always mention parameter with default values after the ones without it.
return - returns the value
def function(*parameter) - *parameter can collect any number of arguments
                            Python creates this into tuple
def function(**parameter) - **parameter can collect any number of key-value pair
                            Python creates this into dictionary
                            the key-value pairs for **parameter are filled in
                            the following format:
                              (key = 'value', key2 = 'value2')

MODULES
import file - imports all the functions from a module in same directory
              to call a function: module.function()
from file import function, function2 - imports a specific function from a module
                                       function calling is same as normal
from file import * - imports all functions from a module
                     not recommended as python may overwrite existing functions
                     of same name
as - gives an alias to a function or module. Example for function:
     from module import function as fn
     fn() is used for function calling
     useful in case program of same name already exists.
     Example for module:
     import module as m
     m.function() will be used for function calling

import styling - in case you're importing from standard library and a module 
                 you wrote, import the standard library module first.
                 Then import your module after a blank line.

CLASSES
Making an object from a class is called instantiation, and we work with
instances of a class.
functions which are part of a class are called method. Their properties are
same, the difference lies only in being part of class and calling.
creating a class:
class Name:
    """docstring"""
    def __init__(self, variable):
        self.variable = variable
    def method(self):
        <code>
    def method(self):
        <code>
  by convention, capitalized name refer to classes in Python
  self - required, must come first
        automatically passed, should not be called
        self is reference to instance itself(class' self --> instance)
        self gives instance access to everything (attribute, method) in class
        variable prefixed with self are available to every method in class
          Example, self.variable is available to every method.
          self is like a module, with variables name and age in it.
          in __init__() we gave self variables name and age and hence, we
          only give self as parameter in method (as it carries variable values
          or attributes as well) 
          and call it same as how we call something from module (self.variable)
  attributes - variable accessible through instance (age, name in above case)
  method calling is similar to calling functions from modules.

An example of classes is this: 
class Dog:
    """A simple attempt to model a dog."""

    def __init__(self, name, age):
        """Initialize name and age attributes."""
        self.name = name
        self.age = age
    
    def sit(self):
        """Simulate a dog sitting in response to a command."""
        print(f"{self.name} is now sitting.")
    
    def roll_over(self):
        """Simulate rolling over in response to a command."""
        print(f"{self.name} rolled over!")

dog = Dog("Chunchunmaru", 5)
print(f"My dog's name is {dog.name}")
print(f"My dog is {dog.age} years old!")
dog.sit()                                   #this is how methods are called.
dog.roll_over()

Inheritance - Child class takes on all the attributes and methods from 
              Parent class which has already been defined. Code:
                  class Parent:
                      <code>
                  class Child(Parent):
                      <code>

super(). - a function which allows us to call method from parent class.
           the parent class is called superclass and child class is called 
           subclass, hence the name.
Overriding Method - to override a method from parent class, set the name of 
                    method in child class to the exact same name as the method 
                    you want to override from parent class.

Composition - Breaking large class into smaller classes that work together.
self.attribute = Class() - setting attribute equal to method call from another
                           class.
                           To call such methods:
                              variable.attribute.method()
Method Chaining - Using 2 methods at once. For example: 
                  print(variable.read_text().rstrip())

EXCEPTIONS
Exception Object - Python creates exception objects when errors arise in 
                   program execution. Example: ZeroDivisionError exception.
try-except block - try:
                       <code>
                   except error_name:
                       <code>/pass (to fail silently)
                   else:
                       <code>
                   We put our code in the 'try' block and if it encounters an 
                   exception, Python looks for an exception block which matches
                   the name of exception and executes the task given in it 
                   instead. In case the code in try block does work, Python 
                   ignores the except block.
                   Any code that depends on try block succeeding is added to 
                   else block.

PYTHON STANDARD LIBRARIES
https://pymotw.com/3/

random https://pymotw.com/3/random/index.html
randint(x,y) - gives a random number from between numbers x and y (inclusive.)
choice() - takes in a list or tuple and randomly gives an item.

pathlib https://pymotw.com/3/pathlib/index.html
Path(path) - takes in the path of file we want to work with.
             .read_text(): returns text of opened file as single string with
                           blank line at the end. Use .rstrip() to fix.
                           You can add an encoding argument in ().
                           For example: file.read_text(encoding='utf-8')
                           This is needed when your system encoding doesn't 
                           match system encoding, like when the file was not 
                           created on your system.
             .splitlines(): turns long string into set (list) of lines.
             .write_text(text): writes text to a file.
                                Python can only write strings to text file, use
                                str() when needed.
                                erases the file and then writes. use cautiously.

